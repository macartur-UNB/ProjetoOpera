/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view.PaineisDeAlteracao;

import control.Controle_Caracteristica;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import javax.swing.JOptionPane;
import model.classes.Caracteristica;
import model.classes.Constante_Atributo;
import model.exception.ArquivoInvalidoException;
import model.exception.CaracteristicaInvalidaException;
import model.exception.DeletarInvalidoException;
import view.PaineisDeCadastro.PainelFuncoes;

/**
 *
 * @author Luciano
 */
public class PnlAlterarCaracteristica extends javax.swing.JPanel {

    /**
     * Creates new form PnlAlterarCaracteristica
     */
    public PnlAlterarCaracteristica() {
        initComponents();
        cmbCaracteristica.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ""}));
        cmbCaracteristica.setEnabled(false);
        PainelFuncoes.habilitarCampos(pnlCadastrarCaracteristica, false);
        iniciarBtnLimpar();
        iniciarBtnAlterar();
        pnlCadastrarCaracteristica.getBtnCadastrar().setEnabled(false);
        pnlCadastrarCaracteristica.setPodeCadastrar(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpTipoDeCaracteristica = new javax.swing.ButtonGroup();
        pnlCadastrarCaracteristica = new view.PaineisDeCadastro.PnlCadastrarCaracteristica();
        jPanel1 = new javax.swing.JPanel();
        rdbFisica = new javax.swing.JRadioButton();
        rdbPsiquica = new javax.swing.JRadioButton();
        rdbRacial = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cmbCaracteristica = new javax.swing.JComboBox();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de Caracteristica"));

        grpTipoDeCaracteristica.add(rdbFisica);
        rdbFisica.setText("Fisica");
        rdbFisica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbFisicaActionPerformed(evt);
            }
        });

        grpTipoDeCaracteristica.add(rdbPsiquica);
        rdbPsiquica.setText("Psiquica");
        rdbPsiquica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbPsiquicaActionPerformed(evt);
            }
        });

        grpTipoDeCaracteristica.add(rdbRacial);
        rdbRacial.setText("Racial");
        rdbRacial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbRacialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdbFisica)
                .addGap(18, 18, 18)
                .addComponent(rdbPsiquica)
                .addGap(18, 18, 18)
                .addComponent(rdbRacial)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbFisica)
                    .addComponent(rdbPsiquica)
                    .addComponent(rdbRacial))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Selecione a Caracteristica"));

        jLabel1.setText("Caracteristica:");

        cmbCaracteristica.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCaracteristica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCaracteristicaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbCaracteristica, 0, 184, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbCaracteristica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnlCadastrarCaracteristica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCadastrarCaracteristica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rdbFisicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbFisicaActionPerformed
        // TODO add your handling code here:
        carregarJComboBox("Fisica");
        
        cmbCaracteristica.setEnabled(true);
        PainelFuncoes.habilitarCampos(pnlCadastrarCaracteristica, false);
        PainelFuncoes.limparTodosOsCampos(pnlCadastrarCaracteristica);
        pnlCadastrarCaracteristica.getGrpTipoCaracteristica().clearSelection();
    }//GEN-LAST:event_rdbFisicaActionPerformed

    private void rdbPsiquicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbPsiquicaActionPerformed
        // TODO add your handling code here:
        carregarJComboBox("Psiquica");
        
        cmbCaracteristica.setEnabled(true);
        PainelFuncoes.habilitarCampos(pnlCadastrarCaracteristica, false);
        PainelFuncoes.limparTodosOsCampos(pnlCadastrarCaracteristica);
        pnlCadastrarCaracteristica.getGrpTipoCaracteristica().clearSelection();
    }//GEN-LAST:event_rdbPsiquicaActionPerformed

    private void rdbRacialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbRacialActionPerformed
        // TODO add your handling code here:
        carregarJComboBox("Racial");
        
        cmbCaracteristica.setEnabled(true);
        PainelFuncoes.habilitarCampos(pnlCadastrarCaracteristica, false);
        PainelFuncoes.limparTodosOsCampos(pnlCadastrarCaracteristica);
        pnlCadastrarCaracteristica.getGrpTipoCaracteristica().clearSelection();
    }//GEN-LAST:event_rdbRacialActionPerformed

    private void cmbCaracteristicaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCaracteristicaActionPerformed
        // TODO add your handling code here:
        try{
            PainelFuncoes.habilitarCampos(pnlCadastrarCaracteristica, false);
            PainelFuncoes.limparTodosOsCampos(pnlCadastrarCaracteristica);
            pnlCadastrarCaracteristica.getGrpTipoCaracteristica().clearSelection();
            pnlCadastrarCaracteristica.getBtnCadastrar().setEnabled(false);
            
            if(!cmbCaracteristica.getSelectedItem().toString().equals("Nenhuma")){
                PainelFuncoes.habilitarCampos(pnlCadastrarCaracteristica, true);
                PainelFuncoes.habilitarCampos(pnlCadastrarCaracteristica.getPnlTipo(), false);
                pnlCadastrarCaracteristica.getBtnCadastrar().setEnabled(true);
                
                String tipo = null;
                if(rdbRacial.isSelected()){
                    tipo = "Racial";
                    pnlCadastrarCaracteristica.getRdbRacial().setSelected(true);
                }
                if(rdbFisica.isSelected()){
                    tipo = "Fisica";
                    pnlCadastrarCaracteristica.getRdbFisica().setSelected(true);
                }
                if(rdbPsiquica.isSelected()){
                    tipo = "Psiquica";
                    pnlCadastrarCaracteristica.getRdbPsiquica().setSelected(true);
                }
                
                Caracteristica caracteristica = Controle_Caracteristica.encontrarCaracteristica(cmbCaracteristica.getSelectedItem().toString(), tipo);
                
                pnlCadastrarCaracteristica.getTxtNome().setText(caracteristica.getNome());
                pnlCadastrarCaracteristica.getTxtCusto().setText(""+caracteristica.getCusto());
                pnlCadastrarCaracteristica.getTxtDescricao().setText(caracteristica.getDescricao());
                
                final int FISICO = Constante_Atributo.FISICO;
                final int DESTREZA = Constante_Atributo.DESTREZA;
                final int INTELIGENCIA = Constante_Atributo.INTELIGENCIA;
                final int VONTADE = Constante_Atributo.VONTADE;
                final int PERCEPCAO = Constante_Atributo.PERCEPCAO;
                final int MENTE = Constante_Atributo.MENTE;
                final int MANA = Constante_Atributo.MANA;
                final int SORTE = Constante_Atributo.SORTE;
                
                if(caracteristica.getModificador() != null){
                    if(caracteristica.getModificador()[FISICO] > 0){
                        pnlCadastrarCaracteristica.getChkFisico().setSelected(true);
                        pnlCadastrarCaracteristica.getTxtFisico().setText(""+caracteristica.getModificador()[FISICO]);
                    }
                    if(caracteristica.getModificador()[DESTREZA] > 0){
                        pnlCadastrarCaracteristica.getChkDestreza().setSelected(true);
                        pnlCadastrarCaracteristica.getTxtDestreza().setText(""+caracteristica.getModificador()[DESTREZA]);
                    }
                    if(caracteristica.getModificador()[INTELIGENCIA] > 0){
                        pnlCadastrarCaracteristica.getChkInteligencia().setSelected(true);
                        pnlCadastrarCaracteristica.getTxtInteligencia().setText(""+caracteristica.getModificador()[INTELIGENCIA]);
                    }
                    if(caracteristica.getModificador()[VONTADE] > 0){
                        pnlCadastrarCaracteristica.getChkVontade().setSelected(true);
                        pnlCadastrarCaracteristica.getTxtVontade().setText(""+caracteristica.getModificador()[VONTADE]);
                    }
                    if(caracteristica.getModificador()[PERCEPCAO] > 0){
                        pnlCadastrarCaracteristica.getChkPercepcao().setSelected(true);
                        pnlCadastrarCaracteristica.getTxtPercepcao().setText(""+caracteristica.getModificador()[PERCEPCAO]);
                    }
                    if(caracteristica.getModificador()[MENTE] > 0){
                        pnlCadastrarCaracteristica.getChkMente().setSelected(true);
                        pnlCadastrarCaracteristica.getTxtMente().setText(""+caracteristica.getModificador()[MENTE]);
                    }
                    if(caracteristica.getModificador()[MANA] > 0){
                        pnlCadastrarCaracteristica.getChkMana().setSelected(true);
                        pnlCadastrarCaracteristica.getTxtMana().setText(""+caracteristica.getModificador()[MANA]);
                    }
                    if(caracteristica.getModificador()[SORTE] > 0){
                        pnlCadastrarCaracteristica.getChkSorte().setSelected(true);
                        pnlCadastrarCaracteristica.getTxtSorte().setText(""+caracteristica.getModificador()[SORTE]);
                    }
                }
            }
        } catch(ArquivoInvalidoException | ClassNotFoundException | IOException e){
            
        }
    }//GEN-LAST:event_cmbCaracteristicaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbCaracteristica;
    private javax.swing.ButtonGroup grpTipoDeCaracteristica;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private view.PaineisDeCadastro.PnlCadastrarCaracteristica pnlCadastrarCaracteristica;
    private javax.swing.JRadioButton rdbFisica;
    private javax.swing.JRadioButton rdbPsiquica;
    private javax.swing.JRadioButton rdbRacial;
    // End of variables declaration//GEN-END:variables


    private void iniciarBtnLimpar(){
        pnlCadastrarCaracteristica.getBtnLimpar().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnLimparActionPerformed();
                //throw new UnsupportedOperationException("Not supported yet.");
            }
        });
    }
    
    private void iniciarBtnAlterar(){
        pnlCadastrarCaracteristica.getBtnCadastrar().setText("Alterar");
        pnlCadastrarCaracteristica.getBtnCadastrar().addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                btnAlterarActionPerformed();
                //throw new UnsupportedOperationException("Not supported yet.");
            }
        });
    }
    
    private void btnAlterarActionPerformed(){
        alterarCaracteristica();
    }
    
    private void btnLimparActionPerformed(){
        rdbFisica.setForeground(Color.BLACK);
        rdbPsiquica.setForeground(Color.BLACK);
        rdbRacial.setForeground(Color.BLACK);
        
        cmbCaracteristica.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ""}));
        cmbCaracteristica.setEnabled(false);
        
        pnlCadastrarCaracteristica.getBtnCadastrar().setEnabled(false);
        
        grpTipoDeCaracteristica.clearSelection();
    }
    
    private void carregarJComboBox(String tipoDeHabilidade){
        cmbCaracteristica.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nenhuma"}));
        
        String diretorios[] = null;
        
        switch(tipoDeHabilidade){
            case "Fisica":
                diretorios = Controle_Caracteristica.listarCaracteristicasFisicas();
                break;
            case "Psiquica":
                diretorios = Controle_Caracteristica.listarCaracteristicasPsiquicas();
                break;
            case "Racial":
                diretorios = Controle_Caracteristica.listarCaracteristicasRaciais();
                break;
        }
        
        if(diretorios != null){
            if(diretorios.length > 0){
                for(int i = 0; i < diretorios.length; i++){
                    cmbCaracteristica.addItem(diretorios[i]);
                }
            }
        }
        
    }
    
    
    private void alterarCaracteristica(){
        try{
            Caracteristica caracteristica = pnlCadastrarCaracteristica.pegarDadosDoPainel();
            String nomeCaracteristicaSelecionada = cmbCaracteristica.getSelectedItem().toString();
            switch(caracteristica.getTipo()){
                case "Fisica":
                    Controle_Caracteristica.removeCaracteristicaFisica(nomeCaracteristicaSelecionada);
                    break;
                case "Psiquica":
                    Controle_Caracteristica.removeCaracteristicaPsiquica(nomeCaracteristicaSelecionada);
                    break;
                case "Racial":
                    Controle_Caracteristica.removeCaracteristicaRacial(nomeCaracteristicaSelecionada);
                    break;
            }
            
            JOptionPane.showMessageDialog(null,"Alterar Caracteristica: " + caracteristica.getNome() +"\nRealizado com Sucesso!","Concluido",JOptionPane.INFORMATION_MESSAGE);
            
            Controle_Caracteristica.cadCaracteristica(caracteristica.getNome(), caracteristica.getDescricao(), caracteristica.getTipo(), caracteristica.getCusto(), caracteristica.getModificador());
            
            PainelFuncoes.limparTodosOsCampos(pnlCadastrarCaracteristica);
            btnLimparActionPerformed();
            
        } catch(ArquivoInvalidoException | DeletarInvalidoException | IOException | CaracteristicaInvalidaException e){
            JOptionPane.showMessageDialog(null,"ERROR: " + e.getMessage(),"Erro",JOptionPane.ERROR_MESSAGE);
        }
    }
}
