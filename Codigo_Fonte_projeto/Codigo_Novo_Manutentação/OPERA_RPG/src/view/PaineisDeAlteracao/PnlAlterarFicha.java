/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view.PaineisDeAlteracao;

import control.Controle_Ficha;
import java.awt.Color;
import java.awt.HeadlessException;
import java.io.IOException;
import javax.swing.JOptionPane;
import model.classes.Constantes;
import model.classes.Ficha;
import model.exception.ArquivoInvalidoException;
import model.exception.DeletarInvalidoException;
import model.exception.JTextFieldInvalidoException;
import view.PaineisDeCadastro.PainelFuncoes;
import view.validacao.ValidarCampos;

/**
 *
 * @author Luciano
 */
public class PnlAlterarFicha extends javax.swing.JPanel {

    /**
     * Creates new form PnlAlterarFicha
     */
    public PnlAlterarFicha() {
        initComponents();
        cmbFicha.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ""}));
        cmbFicha.setEnabled(false);
        PainelFuncoes.habilitarCampos(pnlCadastrarFicha, false);
        iniciarBtnLimpar();
        pnlCadastrarFicha.setPodeCadastrar(false);
        pnlCadastrarFicha.getBtnCadastrar().setEnabled(false);
        iniciarBtnAlterar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpTipoDeFicha = new javax.swing.ButtonGroup();
        pnlTipoFicha = new javax.swing.JPanel();
        rdbJogador = new javax.swing.JRadioButton();
        rdbNpc = new javax.swing.JRadioButton();
        rdbMonstro = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        lblTipoDeFicha = new javax.swing.JLabel();
        cmbFicha = new javax.swing.JComboBox();
        pnlCadastrarFicha = new view.PaineisDeCadastro.PnlCadastrarFicha();

        pnlTipoFicha.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo de Ficha"));

        grpTipoDeFicha.add(rdbJogador);
        rdbJogador.setText("Jogador");
        rdbJogador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbJogadorActionPerformed(evt);
            }
        });

        grpTipoDeFicha.add(rdbNpc);
        rdbNpc.setText("NPC");
        rdbNpc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbNpcActionPerformed(evt);
            }
        });

        grpTipoDeFicha.add(rdbMonstro);
        rdbMonstro.setText("Monstro");
        rdbMonstro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbMonstroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTipoFichaLayout = new javax.swing.GroupLayout(pnlTipoFicha);
        pnlTipoFicha.setLayout(pnlTipoFichaLayout);
        pnlTipoFichaLayout.setHorizontalGroup(
            pnlTipoFichaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTipoFichaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdbJogador)
                .addGap(18, 18, 18)
                .addComponent(rdbNpc)
                .addGap(18, 18, 18)
                .addComponent(rdbMonstro)
                .addContainerGap(57, Short.MAX_VALUE))
        );
        pnlTipoFichaLayout.setVerticalGroup(
            pnlTipoFichaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTipoFichaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlTipoFichaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbJogador)
                    .addComponent(rdbNpc)
                    .addComponent(rdbMonstro))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Selecione a Ficha"));

        lblTipoDeFicha.setText("Ficha:");

        cmbFicha.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbFicha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFichaActionPerformed(evt);
            }
        });
        cmbFicha.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                cmbFichaFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                cmbFichaFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTipoDeFicha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbFicha, 0, 221, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTipoDeFicha)
                    .addComponent(cmbFicha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTipoFicha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlCadastrarFicha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTipoFicha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlCadastrarFicha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rdbJogadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbJogadorActionPerformed
        // TODO add your handling code here:
        carregarJComboBox("Jogador");
        cmbFicha.setEnabled(true);
        PainelFuncoes.habilitarCampos(pnlCadastrarFicha, false);
        PainelFuncoes.limparTodosOsCampos(pnlCadastrarFicha);
        pnlCadastrarFicha.getGrpTipoFicha().clearSelection();
    }//GEN-LAST:event_rdbJogadorActionPerformed

    private void rdbNpcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbNpcActionPerformed
        // TODO add your handling code here:
        carregarJComboBox("NPC");
        cmbFicha.setEnabled(true);
        PainelFuncoes.habilitarCampos(pnlCadastrarFicha, false);
        PainelFuncoes.limparTodosOsCampos(pnlCadastrarFicha);
        pnlCadastrarFicha.getGrpTipoFicha().clearSelection();
    }//GEN-LAST:event_rdbNpcActionPerformed

    private void rdbMonstroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbMonstroActionPerformed
        // TODO add your handling code here:
        carregarJComboBox("Monstro");
        cmbFicha.setEnabled(true);
        PainelFuncoes.habilitarCampos(pnlCadastrarFicha, false);
        PainelFuncoes.limparTodosOsCampos(pnlCadastrarFicha);
        pnlCadastrarFicha.getGrpTipoFicha().clearSelection();
    }//GEN-LAST:event_rdbMonstroActionPerformed

    private void cmbFichaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFichaActionPerformed
        // TODO add your handling code here:
        try{
            PainelFuncoes.habilitarCampos(pnlCadastrarFicha, false);
            PainelFuncoes.limparTodosOsCampos(pnlCadastrarFicha);
            pnlCadastrarFicha.getGrpTipoFicha().clearSelection();
            PainelFuncoes.habilitarCampos(pnlCadastrarFicha.getPnlTipoFicha(), false);
            pnlCadastrarFicha.getBtnCadastrar().setEnabled(false);
            
            if(!cmbFicha.getSelectedItem().toString().equals("Nenhuma")){
                PainelFuncoes.habilitarCampos(pnlCadastrarFicha, true);
                pnlCadastrarFicha.getBtnCadastrar().setEnabled(true);
                Ficha ficha = null;
                if(rdbJogador.isSelected()){
                    ficha = Controle_Ficha.encontrarJogador(cmbFicha.getSelectedItem().toString());
                    pnlCadastrarFicha.getTxtJogador().setText(ficha.getJogador());
                    pnlCadastrarFicha.getTxtJogador().setEnabled(true);
                    pnlCadastrarFicha.getRdbJogador().setSelected(true);
                }
                if(rdbNpc.isSelected()){
                    ficha = Controle_Ficha.encontrarNPC(cmbFicha.getSelectedItem().toString());
                    pnlCadastrarFicha.getTxtJogador().setEnabled(false);
                    pnlCadastrarFicha.getRdbNpc().setSelected(true);
                }
                if(rdbMonstro.isSelected()){
                    ficha = Controle_Ficha.encontrarMonstro(cmbFicha.getSelectedItem().toString());
                    pnlCadastrarFicha.getTxtJogador().setEnabled(false);
                    pnlCadastrarFicha.getRdbNpc().setSelected(true);
                }
                
                pnlCadastrarFicha.getTxtPersonagem().setText(ficha.getPersonagem());
                pnlCadastrarFicha.getTxtCampanha().setText(ficha.getCampanha());
                pnlCadastrarFicha.getTxtExperiencia().setText(""+ficha.getExperiencia());
                pnlCadastrarFicha.getTxtDinheiro().setText(""+ficha.getDinheiro());
                int atributos[] = ficha.getAtributos();
                pnlCadastrarFicha.getTxtFisico().setText(""+atributos[Constantes.Atributos.FISICO]);
                pnlCadastrarFicha.getTxtDestreza().setText(""+atributos[Constantes.Atributos.DESTREZA]);
                pnlCadastrarFicha.getTxtInteligencia().setText(""+atributos[Constantes.Atributos.INTELIGENCIA]);
                pnlCadastrarFicha.getTxtVontade().setText(""+atributos[Constantes.Atributos.VONTADE]);
                pnlCadastrarFicha.getTxtPercepcao().setText(""+atributos[Constantes.Atributos.PERCEPCAO]);
                pnlCadastrarFicha.getTxtMente().setText(""+atributos[Constantes.Atributos.MENTE]);
                pnlCadastrarFicha.getTxtMana().setText(""+atributos[Constantes.Atributos.MANA]);
                pnlCadastrarFicha.getTxtSorte().setText(""+atributos[Constantes.Atributos.SORTE]);
            }
            
        } catch(ArquivoInvalidoException | ClassNotFoundException | IOException e){
            JOptionPane.showMessageDialog(null,"ERROR: " + e.getMessage(),"Erro",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmbFichaActionPerformed

    private void cmbFichaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbFichaFocusLost
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cmbFichaFocusLost

    private void cmbFichaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_cmbFichaFocusGained
        // TODO add your handling code here:
        Object itemSelecionado = cmbFicha.getSelectedItem();
        if(rdbJogador.isSelected()){
            carregarJComboBox("Jogador");
            cmbFicha.setSelectedItem(itemSelecionado);
        }
        if(rdbNpc.isSelected()){
            carregarJComboBox("NPC");
            cmbFicha.setSelectedItem(itemSelecionado);
        }
        if(rdbMonstro.isSelected()){
            carregarJComboBox("Monstro");
            cmbFicha.setSelectedItem(itemSelecionado);
        }
    }//GEN-LAST:event_cmbFichaFocusGained

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cmbFicha;
    private javax.swing.ButtonGroup grpTipoDeFicha;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblTipoDeFicha;
    private view.PaineisDeCadastro.PnlCadastrarFicha pnlCadastrarFicha;
    private javax.swing.JPanel pnlTipoFicha;
    private javax.swing.JRadioButton rdbJogador;
    private javax.swing.JRadioButton rdbMonstro;
    private javax.swing.JRadioButton rdbNpc;
    // End of variables declaration//GEN-END:variables

    private void iniciarBtnLimpar(){
        pnlCadastrarFicha.getBtnLimpar().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });
    }
    
    private void iniciarBtnAlterar(){
        pnlCadastrarFicha.getBtnCadastrar().setText("Alterar");
        pnlCadastrarFicha.getBtnCadastrar().addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlterarActionPerformed(evt);
            }
        });
    }
    
    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {
        rdbJogador.setForeground(Color.BLACK);
        rdbNpc.setForeground(Color.BLACK);
        rdbMonstro.setForeground(Color.BLACK);
        
        cmbFicha.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ""}));
        cmbFicha.setEnabled(false);
        
        pnlCadastrarFicha.getBtnCadastrar().setEnabled(false);
        
        grpTipoDeFicha.clearSelection();
    }  
    
    private void btnAlterarActionPerformed(java.awt.event.ActionEvent evt) {
        alterarFicha();
        
        rdbJogador.setForeground(Color.BLACK);
        rdbNpc.setForeground(Color.BLACK);
        rdbMonstro.setForeground(Color.BLACK);
        
        cmbFicha.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ""}));
        cmbFicha.setEnabled(false);
        
        grpTipoDeFicha.clearSelection();
    }
    
    private void carregarJComboBox(String tipoDeFicha){
        cmbFicha.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nenhuma"}));
        
        String diretorios[] = null;
        
        switch(tipoDeFicha){
            case "Jogador":
                diretorios = Controle_Ficha.listarFichasJogador();
                break;
            
            case "NPC":
                diretorios = Controle_Ficha.listarFichasNPC();
                break;
                
            case "Monstro":
                diretorios = Controle_Ficha.listarFichasMonstro();
                break;
        }
        if(diretorios != null){
            if(diretorios.length > 0){
                for(int i = 0; i < diretorios.length; i++){
                    cmbFicha.addItem(diretorios[i]);
                }
            }
        }
    }
    
    private void alterarFicha(){
        try{
            String jogador = null;
            if(rdbJogador.isSelected()){
                jogador = ValidarCampos.validarCampoTexto(pnlCadastrarFicha.getTxtJogador(), false);
            }
            String personagem = ValidarCampos.validarCampoTexto(pnlCadastrarFicha.getTxtPersonagem(), true);
            String campanha = ValidarCampos.validarCampoTexto(pnlCadastrarFicha.getTxtCampanha(), true);
            int experiencia = ValidarCampos.validarCampoInteiro(pnlCadastrarFicha.getTxtExperiencia());
            int dinheiro = ValidarCampos.validarCampoInteiro(pnlCadastrarFicha.getTxtDinheiro());

            int atributo[] = new int[8];
            final int FISICO = Constantes.Atributos.FISICO;
            final int DESTREZA = Constantes.Atributos.DESTREZA;
            final int INTELIGENCIA = Constantes.Atributos.INTELIGENCIA;
            final int VONTADE = Constantes.Atributos.VONTADE;
            final int PERCEPCAO = Constantes.Atributos.PERCEPCAO;
            final int MENTE = Constantes.Atributos.MENTE;
            final int MANA = Constantes.Atributos.MANA;
            final int SORTE = Constantes.Atributos.SORTE;
            atributo[FISICO] = ValidarCampos.validarCampoInteiro(pnlCadastrarFicha.getTxtFisico());
            atributo[DESTREZA] = ValidarCampos.validarCampoInteiro(pnlCadastrarFicha.getTxtDestreza());
            atributo[INTELIGENCIA] = ValidarCampos.validarCampoInteiro(pnlCadastrarFicha.getTxtInteligencia());
            atributo[VONTADE] = ValidarCampos.validarCampoInteiro(pnlCadastrarFicha.getTxtVontade());
            atributo[PERCEPCAO] = ValidarCampos.validarCampoInteiro(pnlCadastrarFicha.getTxtPercepcao());
            atributo[MENTE] = ValidarCampos.validarCampoInteiro(pnlCadastrarFicha.getTxtMente());
            atributo[MANA] = ValidarCampos.validarCampoInteiro(pnlCadastrarFicha.getTxtMana());
            atributo[SORTE] = ValidarCampos.validarCampoInteiro(pnlCadastrarFicha.getTxtSorte());

            String tipo = null;
            if(rdbJogador.isSelected()){
                tipo = "Jogador";
            }
            if(rdbNpc.isSelected()){
                tipo = "NPC";
            }
            if(rdbMonstro.isSelected()){
                tipo = "Monstro";
            }

            if(tipo == null){
                rdbJogador.setForeground(Color.RED);
                rdbNpc.setForeground(Color.RED);
                rdbMonstro.setForeground(Color.RED);

                rdbJogador.setToolTipText("Algum dos Tipos de Ficha deve ser Selecionado");
                rdbNpc.setToolTipText("Algum dos Tipos de Ficha deve ser Selecionado");
                rdbMonstro.setToolTipText("Algum dos Tipos de Ficha deve ser Selecionado");
                pnlTipoFicha.setToolTipText("Algum dos Tipos de Ficha deve ser Selecionado");
                
                JOptionPane.showMessageDialog(null,"ERROR: " + "Tipo de Ficha nao Selecionado.","Erro",JOptionPane.ERROR_MESSAGE);
            }else{
                switch (tipo) {
                    case "NPC":
                        Controle_Ficha.removerNPC(cmbFicha.getSelectedItem().toString());
                        Controle_Ficha.cadNPC(personagem, campanha, experiencia, atributo, dinheiro);
                        break;
                    case "Monstro":
                        Controle_Ficha.removerMonstro(cmbFicha.getSelectedItem().toString());
                        Controle_Ficha.cadMonstro(personagem, campanha, experiencia, atributo, dinheiro);
                        break;
                    case "Jogador":
                        Controle_Ficha.removerJogador(cmbFicha.getSelectedItem().toString());
                        Controle_Ficha.cadJogador(personagem, jogador, campanha, experiencia, atributo, dinheiro);
                        break;
                    default:
                        break;
                }
                JOptionPane.showMessageDialog(null,"Alterar Ficha: " + personagem +"\nRealizado com Sucesso!","Concluido",JOptionPane.INFORMATION_MESSAGE);
                PainelFuncoes.limparTodosOsCampos(this);
                PainelFuncoes.definirCorDaBordaJTextField(this, Color.GRAY);
                pnlCadastrarFicha.getGrpTipoFicha().clearSelection();
                pnlCadastrarFicha.getBtnCadastrar().setEnabled(false);
            }
        } catch(ArquivoInvalidoException | IOException | JTextFieldInvalidoException | DeletarInvalidoException | HeadlessException e){
            JOptionPane.showMessageDialog(null,"ERROR: " + e.getMessage(),"Erro",JOptionPane.ERROR_MESSAGE);
        }
    }
}
